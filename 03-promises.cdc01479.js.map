{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAUC,YAAW,KACzBC,aAAaF,GACTH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIb,MAAMU,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAE3CF,EAAKM,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBACN,MAAMC,EAAQC,OAAOP,EAAWQ,OAC1BC,EAAOF,OAAON,EAAUO,OACxBE,EAASH,OAAOL,EAAYM,OAElC,GAAIC,GAAQ,GAAKH,GAAS,GAAKI,GAAU,EACvCC,EAAA5B,GAAS6B,OAAOC,QAAQ,uDAI1B,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAI/B7B,EAHiB6B,EAAI,EACAR,EAAQQ,EAAIL,GAG9BM,MAAK,EAAC7B,SAAEA,EAAQC,MAAEA,MACjBwB,EAAA5B,GAAS6B,OAAOI,QACd,uBAAqB9B,QAAiBC,MAAU,IAGnD8B,OAAM,EAAC/B,SAAEA,EAAQC,MAAEA,MAClBwB,EAAA5B,GAAS6B,OAAOC,QACd,sBAAoB3B,QAAeC,MAAU,G,KAMvDa,EAAWkB,aAAa,MAAO,KAC/BjB,EAAUiB,aAAa,MAAO,KAC9BhB,EAAYgB,aAAa,MAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    const timeout = setTimeout(() => {\n      clearTimeout(timeout);\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', function (event) {\n  event.preventDefault();\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  if (step <= 0 || delay <= 0 || amount <= 0) {\n    Notiflix.Notify.failure('Please make sure all values are greater than 0');\n    return;\n  }\n\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const currentDelay = delay + i * step;\n\n    createPromise(position, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\ndelayInput.setAttribute('min', '0');\nstepInput.setAttribute('min', '0');\namountInput.setAttribute('min', '0');\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","timeout","setTimeout","clearTimeout","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","addEventListener","event","preventDefault","delay1","Number","value","step","amount","$parcel$interopDefault","Notify","failure","i","then","success","catch","setAttribute"],"version":3,"file":"03-promises.cdc01479.js.map"}